path = require 'path'
clone = require 'clone'

###
Dependecy object

{
  controllers: 
    {
      application: 'app/controllers/application'
      article:     'app/controllers/article'
    }
  models:
    {
      base: 'app/models/base'
      article: 'app/models/base'
    }
  utils: 
    {
      utils: 'utils/index'
    }
}
###

APP_BASE_PATH = process.env.APP_BASE_PATH || path.resolve(__dirname, '../../')
ORIGINAL_DEPENDECIES = require "#{APP_BASE_PATH}/config/di"

class DI
  constructor: ->
    @dependencies = clone(ORIGINAL_DEPENDECIES)
    @namespace = {}
    return @

  _getFromSource: (path, source = @namespace) ->
    splitedPath = path.split('.')
    for i in [0..splitedPath.length-1]
      item = splitedPath.shift()
      if source[item] 
        source = source[item]
      else
        source = false
    return source

  _setToSource: (path, value, source = @namespace) ->
    splitedPath = path.split('.')
    for i in [0..splitedPath.length-1]
      item = splitedPath.shift()
      if splitedPath.length == 0
        source[item] = value
      else if !source[item]
        source[item] = {}
        source = source[item]
      else 
        source = source[item]
    return value

  require: (args...) =>
    path = args[0]
    unless path then  throw "No module passed"
    module = @_getFromSource(path) || @loadModule(path) 
    unless module then throw "No module found"
    return module

  requireWithReplace: (path, replaceDependecy) =>
    unless typeof replaceDependecy == 'object' then return replaceDependecy

    clonedModule = clone(@require(path))
    for key, value of replaceDependecy
      clonedModule[key] = value    
    return clonedModule

  requireWithContext: (args...) =>
    module = @require(args[0]) 
    unless typeof module == 'function' then throw "Cannot replace context"
    return (-> module.apply(args[1], args.slice(2)))
      
  loadModule: (modulePath) ->
    dir_path = @_getFromSource(modulePath, @dependencies) || modulePath.replace(/\./ig,'/')
    if dir_path
      loadedModule = require dir_path
      @_setToSource(modulePath, loadedModule)
      return loadedModule
    else 
      return false

  replaceDependecy: (modulePath, newPath) ->
    @_setToSource(modulePath, newPath, @dependencies)
    @loadModule(modulePath)

  resetDependecy: (modulePath) ->
    original_dependencies = clone(ORIGINAL_DEPENDECIES)
    @replaceDependecy(modulePath, @_getFromSource(modulePath, original_dependencies))

    

module.exports = new DI()

