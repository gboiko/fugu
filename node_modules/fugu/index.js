// Require modules

var path  = require('path'), clone = require('clone');

// Define CONST
var APP_BASE_PATH = process.env.APP_BASE_PATH || path.resolve(__dirname, '../../'),
  ORIGINAL_DEPENDENCIES = require(APP_BASE_PATH + "/config/di.json");



var DI = (function () {

  function _getFromSource(path, source) {
    var splitedPath = path.split('.'), i = 0, len = splitedPath.length - 1, item;
    for (i; i <= len; i++) {
      item = splitedPath.shift();
      if (source[item]) {
        source = source[item];
      } else {
        source = false;
      }
    }
    return source;
  }

  function _setToSource(path, value, source) {
    var splitedPath = path.split('.'), i = 0, len = splitedPath.length - 1, item;
    for (i; i <= len;  i++) {
      item = splitedPath.shift();
      if (splitedPath.length === 0) {
        source[item] = value;
      } else if (!source[item]) {
        source[item] = {};
        source = source[item];
      } else {
        source = source[item];
      }
    }
    return value;
  }

  function DI() {
    this.dependencies = clone(ORIGINAL_DEPENDENCIES);
    this.namespace   = {};
    return this;
  }

  DI.prototype.require = function (path) {
    if (!path) {
      throw new Error("No module passed");
    }
    var module = _getFromSource(path, this.namespace) || this.loadModule(path);

    if (!module) { throw new Error("Module not exists"); }
    return module;
  };

  DI.prototype.requireWithReplace = function (path, replaceDependecy) {
    if (typeof replaceDependecy !== 'object') { return replaceDependecy; }

    var clonedModule = clone(this.require(path)), key;

    for (key in replaceDependecy) {
      if (replaceDependecy.hasOwnProperty(key)) {
        clonedModule[key] = replaceDependecy[key];
      }
    }
    return clonedModule;
  };

  DI.prototype.requireWithContext = function (path, context) {
    var module = this.require(path),
      callArgs = [].slice.call(arguments, 2);
    if (typeof module !== "function") {
      throw new Error("Cannot replace context");
    }

    return function () {
      return module.apply(context, callArgs);
    };
  };

  DI.prototype.loadModule = function (modulePath) {
    var dir_path = _getFromSource(modulePath, this.dependencies);
    if (!dir_path) { dir_path = modulePath.replace(/\./ig, '/'); }
    var loadedModule = require(APP_BASE_PATH + '/' + dir_path);
    _setToSource(modulePath, loadedModule, this.namespace);
    return loadedModule;
  };

  DI.prototype.replaceDependecy = function (modulePath, newPath) {
    _setToSource(modulePath, newPath, this.dependencies);
    return this.loadModule(modulePath);
  };

  DI.prototype.resetDependecy = function (modulePath) {
    var original_dependencies = clone(ORIGINAL_DEPENDENCIES),
      original_deps = _getFromSource(modulePath, original_dependencies);

    return this.replaceDependecy(modulePath, original_deps);
  };

  return DI;
}());

module.exports = new DI();